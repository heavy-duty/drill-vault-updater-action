(()=>{var __webpack_modules__={32:module=>{module.exports=eval("require")("@actions/core")},406:module=>{module.exports=eval("require")("@actions/github")},16:module=>{module.exports=eval("require")("@heavy-duty/anchor")},348:module=>{module.exports=eval("require")("@solana/spl-token")},944:module=>{module.exports=eval("require")("@solana/spl-token-registry")},952:module=>{module.exports=eval("require")("@solana/web3.js")},358:module=>{module.exports=eval("require")("bn.js")}};var __webpack_module_cache__={};function __nccwpck_require__(e){var t=__webpack_module_cache__[e];if(t!==undefined){return t.exports}var n=__webpack_module_cache__[e]={exports:{}};var a=true;try{__webpack_modules__[e](n,n.exports,__nccwpck_require__);a=false}finally{if(a)delete __webpack_module_cache__[e]}return n.exports}if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=__dirname+"/";var __webpack_exports__={};(()=>{const e=__nccwpck_require__(32);const t=__nccwpck_require__(406);const{getAccount:n,getMint:a}=__nccwpck_require__(348);const{TokenListProvider:o}=__nccwpck_require__(944);const{Connection:r,PublicKey:s}=__nccwpck_require__(952);const{Program:u}=__nccwpck_require__(16);const i=__nccwpck_require__(358);const d={version:"0.1.0",name:"drill",instructions:[{name:"initializeBoard",accounts:[{name:"board",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"acceptedMint",isMut:false,isSigner:false},{name:"boardVault",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board_vault"},{kind:"account",type:"publicKey",account:"Board",path:"board"}]}},{name:"authority",isMut:true,isSigner:true},{name:"rent",isMut:false,isSigner:false},{name:"tokenProgram",isMut:false,isSigner:false},{name:"systemProgram",isMut:false,isSigner:false}],args:[{name:"boardId",type:"u32"},{name:"lockTime",type:"i64"}]},{name:"setBoardAuthority",accounts:[{name:"board",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"authority",isMut:false,isSigner:true},{name:"newAuthority",isMut:false,isSigner:false}],args:[{name:"boardId",type:"u32"}]},{name:"initializeBounty",accounts:[{name:"board",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"bounty",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty"},{kind:"account",type:"publicKey",account:"Board",path:"board"},{kind:"arg",type:"u32",path:"bounty_id"}]}},{name:"acceptedMint",isMut:false,isSigner:false},{name:"bountyVault",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty_vault"},{kind:"account",type:"publicKey",account:"Bounty",path:"bounty"}]}},{name:"authority",isMut:true,isSigner:true},{name:"rent",isMut:false,isSigner:false},{name:"tokenProgram",isMut:false,isSigner:false},{name:"systemProgram",isMut:false,isSigner:false}],args:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"}]},{name:"deposit",accounts:[{name:"board",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"bounty",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty"},{kind:"account",type:"publicKey",account:"Board",path:"board"},{kind:"arg",type:"u32",path:"bounty_id"}]}},{name:"bountyVault",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty_vault"},{kind:"account",type:"publicKey",account:"Bounty",path:"bounty"}]}},{name:"sponsorVault",isMut:true,isSigner:false},{name:"authority",isMut:false,isSigner:true},{name:"tokenProgram",isMut:false,isSigner:false}],args:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"},{name:"amount",type:"u64"}]},{name:"closeBounty",accounts:[{name:"board",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"bounty",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty"},{kind:"account",type:"publicKey",account:"Board",path:"board"},{kind:"arg",type:"u32",path:"bounty_id"}]}},{name:"authority",isMut:false,isSigner:true}],args:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"},{name:"bountyHunter",type:{option:"string"}}]},{name:"setBountyHunter",accounts:[{name:"board",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"bounty",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty"},{kind:"account",type:"publicKey",account:"Board",path:"board"},{kind:"arg",type:"u32",path:"bounty_id"}]}},{name:"authority",isMut:false,isSigner:true}],args:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"},{name:"bountyHunter",type:"string"}]},{name:"sendBounty",accounts:[{name:"board",isMut:false,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"board"},{kind:"arg",type:"u32",path:"board_id"}]}},{name:"bounty",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty"},{kind:"account",type:"publicKey",account:"Board",path:"board"},{kind:"arg",type:"u32",path:"bounty_id"}]}},{name:"bountyVault",isMut:true,isSigner:false,pda:{seeds:[{kind:"const",type:"string",value:"bounty_vault"},{kind:"account",type:"publicKey",account:"Bounty",path:"bounty"}]}},{name:"userVault",isMut:true,isSigner:false},{name:"authority",isMut:true,isSigner:true},{name:"tokenProgram",isMut:false,isSigner:false},{name:"systemProgram",isMut:false,isSigner:false}],args:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"},{name:"bountyHunter",type:"string"}]}],accounts:[{name:"board",type:{kind:"struct",fields:[{name:"authority",type:"publicKey"},{name:"boardId",type:"u32"},{name:"acceptedMint",type:"publicKey"},{name:"lockTime",type:"i64"},{name:"boardBump",type:"u8"},{name:"boardVaultBump",type:"u8"}]}},{name:"bounty",type:{kind:"struct",fields:[{name:"boardId",type:"u32"},{name:"bountyId",type:"u32"},{name:"bountyHunter",type:{option:"string"}},{name:"closedAt",type:{option:"i64"}},{name:"isClosed",type:"bool"},{name:"bountyBump",type:"u8"},{name:"bountyVaultBump",type:"u8"}]}}],errors:[{code:6e3,name:"BountyLockedError",msg:"BountyLockedError"}]};function getProgram(e){return new u(d,e,{})}async function getBoard(e,t){const[n]=await s.findProgramAddress([Buffer.from("board","utf8"),new i(t).toArrayLike(Buffer,"le",4)],e.programId);const a=await e.account.board.fetchNullable(n);if(a===null){return null}return{id:t,publicKey:n,acceptedMint:a.acceptedMint,authority:a.authority,lockTime:a.lockTime,boardBump:a.boardBump,boardVaultBump:a.boardVaultBump}}function getExplorerUrl(e,t,n,a){const o=new URL(`https://explorer.solana.com/${e}/${t}`);o.searchParams.append("cluster",n);if(n==="custom"){o.searchParams.append("customUrl",a)}return o.toString()}function getBountyEnabledCommentBody(e,t,n,a,o,r,s,u,i){const d=`\n  # 💰 Drill Bounty Program 💰\n  \n  Drill was configured successfully, this issue has an active bounty. [Inspect the transaction](${a}) in the Solana Explorer. Below you'll find more details about the Bounty you just created. If you want to get more info about this tool, please read our official doc [here](https://heavyduty.builders/)\n  `;const c=`\n  ## 💾 Board info\n  \n  All about your board.\n  \n  🔢 **ID**: ${e.id}.  \n  🔑 **Public Key**: [${e.publicKey}](${o})  \n  ⏱️ **Lock Time (ms)**:${e.lockTime}  \n  🔒 **Auhtority**:[${e.authority}](${r})\n  `;const l=`\n  ## 🏦 Bounty info\n  \n  All about your new bounty.\n  \n  🔢 **ID**: ${t.id}.  \n  🔑 **Public Key**: [${t.publicKey}](${s})  \n  🧰 **Vault ATA**:[${t.vaultATA}](${u})\n  \n  > _You can use this information and our CLI to fetch more detailed data, like the Bump and others solana detail you may need in some cases._\n  `;const p=`\n  ## 🤳 Solana pay\n  \n  Use the following QR to send funds to bounty vault, please be sure what you are doing before make the transfer, this can't be undone.\n  \n  ![Solana pay QR](https://raw.githubusercontent.com/${n}/master/${i})\n  \n  ### 🪙💵 **CURRENT DEPOSIT AMOUNT: ${t.vaultAmount}** 💵🪙\n  `;const y=`\n  ## 🚨 Disclaimer\n  \n  _PLEASE BE SURE YOU KNOW THIS REPO AND ALREADY SPOKE WITH SOME ADMIN. IS IMPORTANT TO KEEP IN MIND that THIS COMMENT (INCLUDING THE ADDRESS AND THE QR IMAGE) CAN BE MODIFIED FOR ANY PERSON WITH THE SUFFICIENT PRIVILEGE IN THIS REPO. DRILL NOR HEAVYDUTY BE RESPONSIBLE FOR ANY SCAM OR BAD USE OF THIS SOFTWARE._\n  `;const m=`${d}\n---\n${c}\n&nbsp;\n${l}\n---\n${p}---\n${y}\n`;return`${m}\n`}async function run(){try{const u=e.getInput("program-id");const d=await getProgram(u);const c=e.getInput("github-repository");const l=e.getInput("rpc-endpoint");const p=e.getInput("cluster");const y=e.getInput("token");const[m,b]=c.split("/");const g=new r(l);const f=t.getOctokit(y);const{data:_}=await f.rest.repos.get({repo:b,owner:m});const[k]=await s.findProgramAddress([Buffer.from("board","utf8"),new i(_.id).toArrayLike(Buffer,"le",4)],new s(u));const h=await getBoard(d,_.id);const S=await getBounty(d,_.id,issue.number);const{data:w}=await f.rest.issues.listForRepo({repo:b,owner:m,labels:"drill:bounty:enabled",state:"open"});w.forEach((async e=>{const{data:t}=await f.rest.issues.listComments({owner:m,repo:b,issue_number:e.number});const r=t.find((e=>e.body?.toLowerCase().includes("Drill Bounty Program")));if(r!==undefined){const[t]=await s.findProgramAddress([Buffer.from("bounty","utf8"),k.toBuffer(),new i(e.number).toArrayLike(Buffer,"le",4)],new s(u));const[d]=await s.findProgramAddress([Buffer.from("bounty_vault","utf8"),t.toBuffer()],new s(u));const c=await n(g,d);const y=await a(g,c.mint);const w=await(new o).resolve();const B=w.filterByClusterSlug(p).getList();const M=B.find((e=>e.address===y.address.toBase58()));const I=(Number(c.amount)/Math.pow(10,y.decimals)).toLocaleString(undefined,{currencySign:M?.symbol,minimumFractionDigits:2});const E=new URL(`https://explorer.solana.com/address/${d.toBase58()}`);E.searchParams.append("cluster",p);if(p==="custom"){E.searchParams.append("customUrl",l)}const v={id:S.boardId,publicKey:k.toBase58(),lockTime:h.lockTime,authority:h.authority.toBase58()};const A={id:S.id,publicKey:t.toBase58(),vaultATA:c.address.toBase58(),vaultAmount:I};const P=`.drill/${e.number}.jpg`;const T=getBountyEnabledCommentBody(v,A,`${_.owner.login}/${_.name}`,getExplorerUrl("tx",signature,p,g.rpcEndpoint),getExplorerUrl("address",v.publicKey,p,g.rpcEndpoint),getExplorerUrl("address",v.authority,p,g.rpcEndpoint),getExplorerUrl("address",A.publicKey,p,g.rpcEndpoint),getExplorerUrl("address",A.vaultATA,p,g.rpcEndpoint),P);await f.issues.updateComment({body:T,comment_id:r.id,owner:m,repo:b})}}));e.setOutput("result",true)}catch(t){e.setFailed(t.message)}}run()})();module.exports=__webpack_exports__})();